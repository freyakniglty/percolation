[INCLUDE=presentation]
Title         : Demo presentation in Madoko
Sub Title     : In both HTML and PDF
Author        : Daan Leijen
Affiliation   : Microsoft Research
Email         : daan@microsoft.com
Reveal Theme  : sky
Beamer Theme  : singapore

[TITLE]

# Content

[TOC]

# random walks 算法的改进





## 算法简介与回顾

`random walks`的核心思想是：先选择一个集合的种子点（用户输入）。对于每一个非种子点，决定它到每一个种子点的概率，这个由它到每个邻域的概率决定。当每个非种子点被标记上不同种子点的标签后，分割完成。


~ Begin Framed { padding:1ex; margin-top:1ex }
设种子点为$s_1,s_2,...,s_n$,非种子点为$f_1,f_2,..,f_m$.对于一个非种子点$f_k$对应的邻域概率为$p_{k,1},p_{k,2},...,p_{k,w}.w$为邻域个数。则有：

~ Equation  {#eq-gaussian}
\sum_{i=1}^w p_{k,i}=1
~
设$P^l(f_{k,i})$为$f_k$的邻域$f_{k,i}$到种子点$l$的概率。则有：
~ Equation  {#eq-gaussian}
\sum_{i=1}^wp_{k,i}P^l(f_{k,i})
~
~ End Framed

## 与电路的势能进行类比
![electricalcircuit]

[electricalcircuit]: images/electricalcircuit.png "electricalcircuit" { width:auto; max-width:60% }
~ Begin Columns
~ Column { width:50% }
要寻求randomwalker到一个种子点的解，可以由解决Dirichlet带有边界条件的问题来得到。combinatorial Dirichlet 问题在任意图像上的解产生于结点的电动势能（electric potentials）在电路上的分布和边界条件。
~
~ Column





## 可以进行改进的一些步骤

* 前处理(pre-processing)
* 定义概率的改进。
通过自定义边的权重$w_{ij}$ 来重新定义$p_{i,k}$
* 后处理(post-processing)


## 前处理的改进

* 高斯滤波过滤掉不需要的信息。进行整体分割。
* Toboggan 分割
* 创建一个尺度空间
* 用WTA进行相似度检索

主要目的：减小图像噪音，进行相似聚合，让分割更准确。

## 整体分割





## Vertical Slides {#vertical}
Slides can be nested inside of other slides,
try pressing [down].

[![arrowdown]][down]


[down]: # { .navigate-down }
[arrowdown]: images/arrow.png "Down arrow" { width:178px; height:238px }

## Basement Level 1
Press down or up to navigate.

## Basement Level 2

Use `columns` to put blocks next to each other:

~ Begin Columns
~ Column { width:50% }
A monarch butterfly (shown to the right)
spends the winter in Mexico.
~
~ Column
![butterfly]
~
~ End Columns

[butterfly]: images/butterfly.png "A Monarch butterfly" { width:280px; vertical-align:middle }


<!-- 
For local background images, we need to have a reference to the image
such that it's data gets embedded into the HTML page. We define
it using "display=none" so it is hidden in the presentation. 
We can then refer to the image in "data-background-image". 
-->

![bfly]
[bfly]: images/butterfly.png "Butterfly" { display:none }

## Basement Level 3 { data-background-image:images/butterfly.png }
That's it, time to go back up.

[![arrowup]][back2]

[arrowup]:  images/arrow.png "Up arrow" { width:178px; height:238px; transform:rotate(180deg) }
[back2]:    #vertical { .image }

~ End Vertical


## Themes {#themes}

Reveal.js comes with a few themes built in:

* [Default](?#/themes)
* [Sky](?theme=sky#/themes)
* [Beige](?theme=beige#/themes)
* [Serif](?theme=serif#/themes)
* [Simple](?theme=simple#/themes)
* [Night](?theme=night#/themes)
* [Moon](?theme=moon#/themes)
* [Solarized](?theme=solarized#/themes)

Theme demos are loaded after the presentation which leads to flicker. In
production you should load your theme in the `<head>` using a
`<link>`.

## Transitions { #transitions }

You can select from different transitions, like:\
[Cube](?transition=cube#/transitions) -
[Page](?transition=page#/transitions) -
[Concave](?transition=concave#/transitions) -
[Zoom](?transition=zoom#/transitions) -
[Linear](?transition=linear#/transitions) -
[Fade](?transition=fade#/transitions) -
[None](?transition=none#/transitions) -
[Default](?#/transitions)



## Pauses?

Some pauses.

* {.fragment} One
* {.fragment} Two
* {.fragment} Three

And more:

- Test 1
- Test 2
- Test 3
{.fragmented}

Cool!.

~ Slide
A slide with no header
~


## Point of View

In Reveal.js Press **ESC** to enter the slide overview.

Hold down alt and click on any element to zoom in on it using 
 [zoom.js]. Alt + click anywhere to zoom back out.


[zoom.js]: http://lab.hakim.se/zoom-js


## Works in Mobile Safari

Try it out! You can swipe through the slides and pinch your way to the
overview.


## Printing

You can print a `revealjs` presentation nicely from the browser.

First give the `?print-pdf` or `?print-paper` query on your final
presentation (in the browser address bar) and then print from the Chrome
browser selecting `Save to PDF`.

Read more about it at the [revealjs documentation](https://github.com/hakimel/reveal.js#pdf-export)

## RevealJS library

Normally, the `revealjs` library is loaded from a CDN but you can specify your
own url using metadata:

    Reveal Url: <my url>

This can be useful when using a [server to run revealjs](https://github.com/hakimel/reveal.js#full-setup)
where you may use something like:

    @nopreview Reveal Url: http://localhost:8000/reveal.js


## Thanks for looking :-)

[slide]: http://research.microsoft.com/en-us/um/people/daan/madoko/samples/slidedemo/out/slidedemo.html
[slide-mdk]: https://www.madoko.net/editor.html?#url=http://research.microsoft.com/en-us/um/people/daan/madoko/samples/slidedemo/slidedemo.mdk&options={"delayedUpdate":"true"}
[slide-pdf]: http://research.microsoft.com/en-us/um/people/daan/madoko/samples/slidedemo/out/slidedemo.pdf
